"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-u=)nti=7vv^gf+ma6%3=3wr(o3_ja@4i&slm35y3w(w_06bad5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'public/static/')
MEDIA_ROOT = os.path.join(BASE_DIR, 'public/media/')
# REWRITE_STATIC_URLS= True

MULTITENANT_RELATIVE_MEDIA_ROOT = "%s"  # (default: create sub-directory for each tenant)
# MULTITENANT_RELATIVE_STATIC_ROOT = ""

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'public/staticfiles')
]
# TENANT_COLOR_ADMIN_APPS = False
COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'django_libsass.SassCompiler'),
)
LIBSASS_SOURCE_COMMENTS = False
LIBSASS_OUTPUT_STYLE = 'compressed'
if DEBUG:
    COMPRESS_ENABLED= True
if not DEBUG:
    COMPRESS_ENABLED=True
    COMPRESS_OFFLINE = True
    COMPRESS_URL = STATIC_URL
    COMPRESS_ROOT='/app/public/static/'

# Application definition
"""
    These app's data are stored on the public schema
"""

HAS_MULTI_TYPE_TENANTS = True
MULTI_TYPE_DATABASE_FIELD = 'type'  # needs to be a char field length depends on the max size of the type value
TENANT_LIMIT_SET_CALLS=True
TENANT_TYPES = {
    "public": {  # this is the name of the public schema from get_public_schema_name
        "APPS": [
                'django_tenants',
                'tenant',
                 'django.contrib.admin',
                 'django.contrib.auth',
                 'django.contrib.contenttypes',
                 'django.contrib.sessions',
                 'django.contrib.messages',
                 'django.contrib.staticfiles',
                 'blog',
                 'ckeditor',
                 'ckeditor_uploader',
                 'main_site',
                ],
        "URLCONF": "main_site.urls",
    },
    "type_sim": {
        "label": "Kinh doanh SIM số",
        "urlpatterns_app": [("sims.urls","sims"), ("blog.urls", "blog"), ("theme_config.urls","theme_config"), ('seo_optimizer.urls','seo_optimizer'),('banking_affiliate.urls','banking_affiliate'), ('appsim.urls', 'appsim'),],
        "APPS": [
                 'django.contrib.auth',
                 'django.contrib.admin',
                 'django.contrib.contenttypes',
                 'django.contrib.sessions',
                 'django.contrib.messages',
                 'django.contrib.sitemaps',
                 'django.contrib.staticfiles',
                 'compressor',
                 'sims',
                 'blog',
                 'banking_affiliate',
                 'appsim',
                 'theme_config',
                 'sale_alert',
                 'seo_optimizer',
                 'ckeditor',
                 'ckeditor_uploader',
                ],
        "URLCONF": "core.urls",
    },
    "type_fengshui": {
        "label": "Phong thuỷ",
        "urlpatterns_app": [("blog.urls", "blog"), ("theme_config.urls","theme_config")],
        "APPS": [
                 'django.contrib.auth',
                 'django.contrib.admin',
                 'django.contrib.contenttypes',
                 'django.contrib.sitemaps',
                 'django.contrib.sessions',
                 'django.contrib.messages',
                 'django.contrib.staticfiles',
                 'compressor',
                 'ckeditor',
                 'blog',
                 'seo_optimizer',
                ],
        "URLCONF": "core.urls",
    }
}
DBSETTINGS_USE_SITES = False
INSTALLED_APPS = ['core', 'compressor', 'requests', 'django.contrib.sitemaps',]
for schema in TENANT_TYPES:
    INSTALLED_APPS += [app for app in TENANT_TYPES[schema]["APPS"] if app not in INSTALLED_APPS]
SHOW_PUBLIC_IF_NO_TENANT_FOUND=True

MIDDLEWARE = [
    'core.middleware.TenantMiddleware',
    'core.middleware.HealthCheckMiddleware',
    'core.middleware.InactiveTenantMiddleware',
    'django.middleware.gzip.GZipMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'core.middleware.DisableCSRFMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',
    # custom tenant middleware
    # 'core.middleware.DNSResolverMiddleware',
    # add this add the top
    # django tenant middleware
    # 'django.middleware.cache.UpdateCacheMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'htmlmin.middleware.HtmlMinifyMiddleware',
    'htmlmin.middleware.MarkRequestMiddleware'
]
TENANT_MODEL = "tenant.Tenant"
TENANT_DOMAIN_MODEL = "tenant.Domain"
ROOT_URLCONF = ''
SITE_ID = 1

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [os.path.join(BASE_DIR, 'templates'), os.path.join(BASE_DIR, '%s/templates'), os.path.join(BASE_DIR, 'main_site/templates')],  # -> Dirs used by the standard template loader
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.template.context_processors.request',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.settings',
               
            ],
            "loaders": [
                "django_tenants.template.loaders.filesystem.Loader",  # Must be first
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
            ],
        },
    },
]
MULTITENANT_TEMPLATE_DIRS = [
    os.path.join(BASE_DIR, "public/tenantsfiles/%s/templates" ),
]

WSGI_APPLICATION = 'core.wsgi.application'



# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django_tenants.postgresql_backend',
        'NAME': os.environ.get('DATABASE_DB', 'default'),
        'USER': os.environ.get('DATABASE_USER', 'postgres'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD', '7y6c4a0k'),
        'HOST': os.environ.get('DATABASE_HOST', '165.22.107.160'),
        'PORT': os.environ.get('DATABASE_PORT', '30218'),
        'CONN_MAX_AGE': 600
    }
}

# DATABASES = {
#     'default': {
#         # Tenant Engine
#         'ENGINE': 'django_tenants.postgresql_backend',
#         # set database name
#         'NAME': 'saasy',
#         # set your user details
#         'USER': 'omen',
#         'PASSWORD': 'password',
#         'HOST': 'localhost',
#         'POST': '5432'
#     }
# }

# DATABASE ROUTER
DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'vi'
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale'),]
LANGUAGES = [
    ('vi', 'Vietnamese'),
    ('en', 'English'),
]

TIME_ZONE = 'Asia/Ho_Chi_Minh'
USE_I18N = True
USE_L10N = False
USE_TZ = False
DATE_FORMAT = "Y-m-d"
DATETIME_FORMAT = "Y-m-d H:i:s"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_STORAGE = "django_tenants.staticfiles.storage.TenantStaticFilesStorage"
DEFAULT_FILE_STORAGE = "django_tenants.files.storage.TenantFileSystemStorage"
STATICFILES_FINDERS = [
    "django_tenants.staticfiles.finders.TenantFileSystemFinder",  # Must be first
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
]
MULTITENANT_STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "public/tenantsfiles/%s/static" ),
]
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'
# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug_file.log',
        },
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        '': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        '': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    }
}

# CKEditor settigs
# THUMBNAIL_PROCESSORS = (
#     'easy_thumbnails.processors.colorspace',
#     'easy_thumbnails.processors.autocrop',
#     #'easy_thumbnails.processors.scale_and_crop',
#     'filer.thumbnail_processors.scale_and_crop_with_subject_location',
#     'easy_thumbnails.processors.filters',
# )

CKEDITOR_UPLOAD_PATH = 'public/uploads/'

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'height': 300,
        'width': '100%',
        'enterMode' : '2',
        'shiftEnterMode': '1',

        # 'toolbar_Custom': [
        #     ['FilerImage']
        # ],
        # 'extraPlugins': 'filerimage',
        # 'removePlugins': 'image'
        'extraPlugins': ','.join([
            'uploadimage', # the upload image feature
            # your extra plugins here
            'div',
            'autolink',
            'autoembed',
            'embedsemantic',
            'autogrow',
            # 'devtools',
            'widget',
            'lineutils',
            'clipboard',
            'dialog',
            'dialogui',
            'elementspath'
        ]),
    },
}
# CSRF_TRUSTED_ORIGINS = ['https://*','https://*.simthanglong.net', 'http://*.localhost','http://stl.vn','http://*.stl.vn']
ALLOWED_HOSTS = ["*"]
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
X_FRAME_OPTIONS = 'SAMEORIGIN'
LOGIN_URL='/admin/login/'
HTML_MINIFY = True
MULTI_TENANT=False
LOGIN_REDIRECT_URL='/admin'
EMPTY_CHOICE = (('', '--------'),)
PUBLIC_SCHEMA_NAME='public'
SESSION_COOKIE_AGE=3600 * 24
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10 MB
if not DEBUG:
    CACHES = {
        'default': {
            'BACKEND': 'core.tenant_cache.TenantRedisCache',
            'LOCATION': os.environ.get('REDIS_SERVER', ''),
            'KEY_FUNCTION': 'django_tenants.cache.make_key',
            'REVERSE_KEY_FUNCTION': 'django_tenants.cache.reverse_key',
            'OPTIONS': {
                'PASSWORD': os.environ.get('REDIS_PASSWORD', None),
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
        # "default": {
        #     'BACKEND': 'core.tenant_cache.TenantRedisCache',
        #     'LOCATION': 'unique-suffix-for-your-tenant',
        # }
    }
